<?xml version="1.0"?>
<ruleset name="Inpsyde Coding Standard">

    <description>PHP 7+ coding standards for Inpsyde WordPress projects.</description>

    <autoload>./Inpsyde/Helpers.php</autoload>
    <autoload>./Inpsyde/PHPCSAliases.php</autoload>

    <file>./Inpsyde/Sniffs</file>
    <file>./tests/src</file>
    <file>./tests/cases</file>

    <!--
    PHP 7.0 and higher.
    -->
    <config name="testVersion" value="7.0-"/>

    <!--
    Arguments: colors, show progress and show sniff name.
    -->
    <arg name="colors"/>
    <arg value="sp"/>

    <!--
    PSR 2 Code style.
    See http://www.php-fig.org/psr/psr-2/
    -->
    <rule ref="PSR2">
        <exclude name="Generic.Files.LineLength.TooLong"/>
    </rule>

    <!--
    Some sanity in variables.
    See https://github.com/sirbrillig/phpcs-variable-analysis
    -->
    <rule ref="VariableAnalysis"/>

    <!--
    Neutron standard are quality tools for PHP7 development from Automattic.
    See https://github.com/Automattic/phpcs-neutron-standard
    -->
    <rule ref="NeutronStandard">
        <exclude name="NeutronStandard.Functions.LongFunction"/>
        <exclude name="NeutronStandard.Functions.VariableFunctions"/>
        <exclude name="NeutronStandard.Functions.TypeHint"/>
        <exclude name="NeutronStandard.Constants.DisallowDefine"/>
    </rule>

    <!--
    Some WordPress specific rules.
    See https://github.com/WordPress-Coding-Standards/WordPress-Coding-Standards
    -->
    <rule ref="WordPress.PHP.StrictComparisons"/>
    <rule ref="WordPress.PHP.StrictInArray"/>
    <rule ref="WordPress.PHP.POSIXFunctions"/>
    <rule ref="WordPress.PHP.DevelopmentFunctions"/>
    <rule ref="WordPress.PHP.DevelopmentFunctions.error_log">
        <type>error</type>
    </rule>

    <!--
    Generic
    -->
    <rule ref="Generic.Metrics.CyclomaticComplexity">
        <properties>
            <property name="absoluteComplexity" value="50"/>
        </properties>
    </rule>
    <rule ref="Generic.Metrics.NestingLevel">
        <properties>
            <property name="nestingLevel" value="2"/>
            <property name="absoluteNestingLevel" value="4"/>
        </properties>
    </rule>
    <rule ref="Generic.NamingConventions.ConstructorName"/>
    <rule ref="Generic.PHP.CharacterBeforePHPOpeningTag"/>
    <rule ref="Generic.PHP.LowerCaseConstant"/>
    <rule ref="Squiz.Classes.LowercaseClassKeywords"/>
    <rule ref="Squiz.PHP.CommentedOutCode">
        <properties>
            <property name="maxPercentage" value="45"/>
        </properties>
    </rule>
    <rule ref="Squiz.PHP.Eval"/>
    <rule ref="Squiz.PHP.InnerFunctions"/>
    <rule ref="Squiz.PHP.LowercasePHPFunctions"/>
    <rule ref="Squiz.PHP.NonExecutableCode"/>
    <rule ref="Squiz.Scope.MemberVarScope"/>
    <rule ref="Squiz.Scope.StaticThisUsage"/>

    <!--
    Use own styles :)
    -->
    <rule ref="./Inpsyde/Sniffs/CodeQuality/DisallowShortOpenTagSniff.php"/>
    <rule ref="./Inpsyde/Sniffs/CodeQuality/ElementNameMinimalLengthSniff.php"/>
    <rule ref="./Inpsyde/Sniffs/CodeQuality/ForbiddenPublicPropertySniff.php"/>
    <rule ref="./Inpsyde/Sniffs/CodeQuality/FunctionLengthSniff.php"/>
    <rule ref="./Inpsyde/Sniffs/CodeQuality/HookClosureReturnSniff.php"/>
    <rule ref="./Inpsyde/Sniffs/CodeQuality/LineLengthSniff.php"/>
    <rule ref="./Inpsyde/Sniffs/CodeQuality/NoElseSniff.php"/>
    <rule ref="./Inpsyde/Sniffs/CodeQuality/NoAccessorsSniff.php"/>
    <rule ref="./Inpsyde/Sniffs/CodeQuality/PropertyPerClassLimitSniff.php"/>

</ruleset>
